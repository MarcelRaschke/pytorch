graph(%a.1_data : Dynamic
      %a.1_mask : Dynamic
      %a.1_dims : Dynamic
      %b_data : Dynamic
      %b_mask : Dynamic
      %b_dims : Dynamic) {
  %6 : int = prim::Constant[value=1]()
  %7 : float = prim::Constant[value=0.1]()
  %8 : Float() = prim::NumToTensor(%7)
  %other : float = prim::TensorToNum(%8)
  %10 : Dynamic = aten::gt(%a.1_data, %other)
  %11 : bool = prim::TensorToBool(%10)
  %12 : Long() = prim::NumToTensor(%6)
  %alpha : float = prim::TensorToNum(%12)
  %data : Dynamic = aten::add(%a.1_data, %b_data, %alpha)
  %mask : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %17 : bool = prim::Constant[value=1]()
  %18 : int = prim::Constant[value=1]()
  %19 : Dynamic = aten::type_as(%a.1_mask, %10)
  %data.2 : Dynamic = aten::mul(%10, %19)
  %21 : int = aten::dim(%data.2)
  %22 : bool = aten::eq(%21, %18)
  %cond_data : Dynamic, %cond_mask : Dynamic = prim::If(%22)
    block0() {
      %25 : int = aten::dim(%data)
      %26 : int = aten::sub(%25, %18)
      %data.4 : Dynamic = prim::Loop(%26, %17, %data.2)
        block0(%28 : int, %29 : Dynamic) {
          %30 : int = aten::dim(%29)
          %data.3 : Dynamic = aten::unsqueeze(%29, %30)
          -> (%17, %data.3)
        }
      %cond_data.1 : Dynamic = aten::expand_as(%data.4, %data)
      %cond_mask.1 : Dynamic = aten::expand_as(%data.4, %mask)
      -> (%cond_data.1, %cond_mask.1)
    }
    block1() {
      -> (%data.2, %data.2)
    }
  %res_data : Dynamic = aten::where(%cond_data, %data, %a.1_data)
  %res_mask : Dynamic = aten::where(%cond_mask, %mask, %a.1_mask)
  %res_dims : Dynamic = aten::__or__(%dims, %a.1_dims)
  return (%res_data, %res_mask, %res_dims);
}
