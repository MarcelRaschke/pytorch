graph(%0 : Double(1, 3, 224, 224)
      %1 : Double(64, 3, 11, 11)
      %2 : Double(64)
      %3 : Double(192, 64, 5, 5)
      %4 : Double(192)
      %5 : Double(384, 192, 3, 3)
      %6 : Double(384)
      %7 : Double(256, 384, 3, 3)
      %8 : Double(256)
      %9 : Double(256, 256, 3, 3)
      %10 : Double(256)
      %11 : Double(4096, 9216)
      %12 : Double(4096)
      %13 : Double(4096, 4096)
      %14 : Double(4096)
      %15 : Double(1000, 4096)
      %16 : Double(1000)) {
  %17 : int = prim::Constant[value=4](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %18 : int[] = prim::ListConstruct(%17, %17), scope: AlexNet/Sequential[features]/Conv2d[0]
  %19 : int = prim::Constant[value=2](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %20 : int[] = prim::ListConstruct(%19, %19), scope: AlexNet/Sequential[features]/Conv2d[0]
  %21 : int = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %22 : int[] = prim::ListConstruct(%21, %21), scope: AlexNet/Sequential[features]/Conv2d[0]
  %23 : bool = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %24 : int = prim::Constant[value=0](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %25 : int[] = prim::ListConstruct(%24, %24), scope: AlexNet/Sequential[features]/Conv2d[0]
  %26 : bool = prim::Constant[value=1](), scope: AlexNet/Sequential[features]/Conv2d[0]
  %input.1 : Double(1, 64, 55, 55) = aten::_convolution(%0, %1, %2, %18, %20, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[0]
  %input.2 : Double(1, 64, 55, 55) = aten::threshold(%input.1, %24, %24), scope: AlexNet/Sequential[features]/ReLU[1]
  %29 : int = prim::Constant[value=3](), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %30 : int[] = prim::ListConstruct(%29, %29), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %31 : Double(1, 64, 27, 27), %32 : Long(1, 64, 27, 27) = aten::max_pool2d_with_indices(%input.2, %30, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[2]
  %input.3 : Double(1, 192, 27, 27) = aten::_convolution(%31, %3, %4, %22, %20, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[3]
  %input.4 : Double(1, 192, 27, 27) = aten::threshold(%input.3, %24, %24), scope: AlexNet/Sequential[features]/ReLU[4]
  %35 : Double(1, 192, 13, 13), %36 : Long(1, 192, 13, 13) = aten::max_pool2d_with_indices(%input.4, %30, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[5]
  %input.5 : Double(1, 384, 13, 13) = aten::_convolution(%35, %5, %6, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[6]
  %38 : Double(1, 384, 13, 13) = aten::threshold(%input.5, %24, %24), scope: AlexNet/Sequential[features]/ReLU[7]
  %input.6 : Double(1, 256, 13, 13) = aten::_convolution(%38, %7, %8, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[8]
  %40 : Double(1, 256, 13, 13) = aten::threshold(%input.6, %24, %24), scope: AlexNet/Sequential[features]/ReLU[9]
  %input.7 : Double(1, 256, 13, 13) = aten::_convolution(%40, %9, %10, %22, %22, %22, %23, %25, %21, %23, %23, %26), scope: AlexNet/Sequential[features]/Conv2d[10]
  %input.8 : Double(1, 256, 13, 13) = aten::threshold(%input.7, %24, %24), scope: AlexNet/Sequential[features]/ReLU[11]
  %43 : Double(1, 256, 6, 6), %44 : Long(1, 256, 6, 6) = aten::max_pool2d_with_indices(%input.8, %30, %20, %25, %22, %23), scope: AlexNet/Sequential[features]/MaxPool2d[12]
  %45 : int = aten::size(%43, %24), scope: AlexNet
  %46 : Long() = prim::NumToTensor(%45), scope: AlexNet
  %47 : int = prim::TensorToNum(%46), scope: AlexNet
  %48 : int = prim::Constant[value=9216](), scope: AlexNet
  %49 : int[] = prim::ListConstruct(%47, %48), scope: AlexNet
  %input.9 : Double(1, 9216) = aten::view(%43, %49), scope: AlexNet
  %51 : float = prim::Constant[value=0.5](), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %input.10 : Double(1, 9216) = aten::dropout(%input.9, %51, %26), scope: AlexNet/Sequential[classifier]/Dropout[0]
  %53 : Double(9216!, 4096!) = aten::t(%11), scope: AlexNet/Sequential[classifier]/Linear[1]
  %input.11 : Double(1, 4096) = aten::addmm(%12, %input.10, %53, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[1]
  %input.12 : Double(1, 4096) = aten::threshold(%input.11, %24, %24), scope: AlexNet/Sequential[classifier]/ReLU[2]
  %input.13 : Double(1, 4096) = aten::dropout(%input.12, %51, %26), scope: AlexNet/Sequential[classifier]/Dropout[3]
  %57 : Double(4096!, 4096!) = aten::t(%13), scope: AlexNet/Sequential[classifier]/Linear[4]
  %input.14 : Double(1, 4096) = aten::addmm(%14, %input.13, %57, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[4]
  %input : Double(1, 4096) = aten::threshold(%input.14, %24, %24), scope: AlexNet/Sequential[classifier]/ReLU[5]
  %60 : Double(4096!, 1000!) = aten::t(%15), scope: AlexNet/Sequential[classifier]/Linear[6]
  %61 : Double(1, 1000) = aten::addmm(%16, %input, %60, %21, %21), scope: AlexNet/Sequential[classifier]/Linear[6]
  return (%61);
}
